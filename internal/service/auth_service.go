package service

import (
	pb "auth-microservice/auth-microservice/proto"
	"context"
	"fmt"
	"log"
	"time"

	"auth-microservice/internal/auth"
	models "auth-microservice/internal/model"
	"auth-microservice/internal/validation"

	"github.com/golang-jwt/jwt"
	"go.mongodb.org/mongo-driver/bson"
	"golang.org/x/crypto/bcrypt"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

func (s *AuthService) Register(ctx context.Context, in *pb.RegisterRequest) (*pb.RegisterReply, error) {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡πÄ‡∏ä‡πà‡∏ô ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
	if err := validation.ValidateEmail(in.GetEmail(), ctx, s.UserCollection); err != nil {
		return nil, err
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á username
	if err := validation.ValidateUsername(in.GetUsername(), ctx, s.UserCollection); err != nil {
		return nil, err
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏î‡πâ‡∏ß‡∏¢ bcrypt
	hashedPassword, err1 := validation.ValidatePassword(in.GetPassword())
	if err1 != nil {
		return nil, err1
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á user document ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö insert ‡∏•‡∏á MongoDB
	user := map[string]interface{}{
		"email":     in.GetEmail(),
		"username":  in.GetUsername(),
		"password":  string(hashedPassword),
		"createdAt": time.Now(),
		"updatedAt": time.Now(),
		"deleted":   false,
		"deletedAt": nil,
		"role":      in.GetRole(),
	}

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô collection ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
	_, err := s.UserCollection.InsertOne(ctx, user)
	if err != nil {
		return nil, err
	}

	// ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client
	return &pb.RegisterReply{
		Email:     in.GetEmail(),
		Username:  in.GetUsername(),
		CreatedAt: time.Now().Format(time.RFC3339),
	}, nil
}

func (s *AuthService) Login(ctx context.Context, in *pb.LoginRequest) (*pb.LoginReply, error) {
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á filter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å email
	filter := bson.M{"email": in.GetEmail(), "deleted": bson.M{"$ne": true}}

	var user map[string]interface{}

	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å MongoDB
	err := s.UserCollection.FindOne(ctx, filter).Decode(&user)
	if err != nil {
		return nil, status.Error(codes.NotFound, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô rate limit ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	isLimited, err := s.isRateLimited(ctx, in.GetEmail())
	if err != nil {
		return nil, status.Error(codes.Internal, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Rate Limit ‡πÑ‡∏î‡πâ")
	}
	if isLimited {
		return nil, status.Error(codes.ResourceExhausted, "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	hashedPassword := user["password"].(string)
	err = bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(in.GetPassword()))
	if err != nil {
		// ‡∏ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î ‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° count ‡πÉ‡∏´‡πâ rate limit
		s.isRateLimited(ctx, in.GetEmail()) // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö rate limit ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢
		return nil, status.Error(codes.Unauthenticated, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
	userEmail := in.GetEmail()
	redisKey := fmt.Sprintf("active_token:%s", userEmail)

	oldToken, err := s.Redis.Get(ctx, redisKey).Result()
	if err == nil && oldToken != "" {
		// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà, ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Blacklist
		blacklistedToken := models.BlacklistedToken{
			Token:     oldToken,
			ExpiresAt: time.Now(), // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
		}
		_, err := s.BlacklistCollection.InsertOne(ctx, blacklistedToken)
		if err != nil {
			return nil, status.Error(codes.Internal, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡πÄ‡∏Ç‡πâ‡∏≤ blacklisted ‡πÑ‡∏î‡πâ")
		}
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
	token, err := auth.GenerateJWT(in.GetEmail(), user["role"].(string))
	if err != nil {
		return nil, status.Error(codes.Internal, "‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô")
	}

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á Redis ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤ expiration
	jwtExpiration := time.Hour * 24
	err = s.Redis.Set(ctx, redisKey, token, jwtExpiration).Err()
	if err != nil {
		log.Printf("Could not set active token in Redis for user %s: %v", userEmail, err)
	}

	// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client
	return &pb.LoginReply{
		Email:    user["email"].(string),
		Username: user["username"].(string),
		Token:    token,
	}, nil
}

func (s *AuthService) Logout(ctx context.Context, in *pb.LogoutRequest) (*pb.LogoutReply, error) {
	//‡∏î‡∏∂‡∏á token ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ logout
	tokenStr := in.GetToken()

	if tokenStr == "" {
		return nil, status.Error(codes.InvalidArgument, "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ token")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏ñ‡∏π‡∏Å blacklist ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
	isBlacklisted, err := s.IsTokenBlacklisted(ctx, tokenStr)
	if err != nil {
		return nil, status.Error(codes.Internal, "‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô")
	}
	if isBlacklisted {
		return nil, status.Error(codes.FailedPrecondition, "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
	token, err := jwt.Parse(tokenStr, func(token *jwt.Token) (interface{}, error) {
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, fmt.Errorf("‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:: %v", token.Header["alg"])
		}
		return auth.JwtSecret, nil
	})

	if err != nil || !token.Valid {
		return nil, status.Error(codes.Unauthenticated, "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏")
	}

	// ‡∏î‡∏∂‡∏á email ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
	var userEmail string
	if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {
		if email, ok := claims["email"].(string); ok {
			userEmail = email
		}
	}

	if userEmail == "" {
		return nil, status.Error(codes.InvalidArgument, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏î‡πâ")
	}

	// ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡∏•‡∏á blacklist
	exp, err := auth.GetTokenExpiration(tokenStr)
	if err != nil {
		exp = time.Now().Add(24 * time.Hour) // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î default expiration
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡πÄ‡∏Ç‡πâ‡∏≤ blacklist
	blacklistedToken := models.BlacklistedToken{
		Token:     tokenStr,
		ExpiresAt: exp,
	}

	// ‡∏•‡∏ö token ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Redis
	_, err = s.BlacklistCollection.InsertOne(ctx, blacklistedToken)
	if err != nil {
		return nil, status.Error(codes.Internal, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏î‡πâ")
	}

	// ‡∏•‡∏ö Active Token ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Redis
	redisKey := fmt.Sprintf("active_token:%s", userEmail)
	if err := s.Redis.Del(ctx, redisKey).Err(); err != nil {
		log.Printf("Could not delete active token from Redis for user %s: %v", userEmail, err)
	}

	// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	return &pb.LogoutReply{
		Message: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
	}, nil
}

// func (s *AuthService) RegisterBulkUsers(ctx context.Context, count int) error {
// 	const batchSize = 1000

// 	var wg sync.WaitGroup
// 	sem := make(chan struct{}, 10) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î concurrency ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 batch ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô

// 	startTime := time.Now()

// 	for i := 0; i < count; i += batchSize {
// 		wg.Add(1)
// 		sem <- struct{}{}

// 		go func(start int) {
// 			defer wg.Done()
// 			defer func() { <-sem }()

// 			var users []interface{}
// 			now := time.Now()

// 			for j := start; j < start+batchSize && j < count; j++ {
// 				email := fmt.Sprintf("bulkuser%06d@example.com", j)
// 				username := fmt.Sprintf("bulkuser%06d", j)
// 				password := "Password123!"

// 				// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏¢ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ã‡πâ‡∏≥
// 				hashedPassword, _ := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)

// 				user := bson.M{
// 					"email":     email,
// 					"username":  username,
// 					"password":  string(hashedPassword),
// 					"createdAt": now,
// 					"updatedAt": now,
// 					"deleted":   false,
// 					"deletedAt": nil,
// 					"role":      "user",
// 				}
// 				users = append(users, user)
// 			}

// 			_, err := s.UserCollection.InsertMany(ctx, users)
// 			if err != nil {
// 				log.Printf("‚ùå Insert batch %d-%d failed: %v", start, start+batchSize, err)
// 			} else {
// 				log.Printf("‚úÖ Inserted batch %d-%d", start, start+batchSize)
// 			}
// 		}(i)
// 	}

// 	wg.Wait()
// 	log.Printf("üéâ Bulk register %d users completed in %s", count, time.Since(startTime))
// 	return nil
// }
